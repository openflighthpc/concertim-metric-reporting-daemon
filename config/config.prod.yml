# Configuration for the HTTP API.
api:
  # The address of the network interface to listen on.
  ip: "0.0.0.0"

  # The port to listen on.
  port: 3000

# Configuration for the gangali data source server.
gds:
  # The address of the network interface to listen on.
  ip: "127.0.0.1"

  # The port to listen on.
  port: 8678

  # The cluster name to use in the ganglia output.
  clusterName: "unspecified"

  # The source to use in the ganglia output.
  metricSource: "ct-metric-reporting-daemon"

  # The time in seconds that a host should remain "fresh" for.
  #
  # If the last metric for a host was reported more than `hostTTL` seconds
  # ago, the host and all of its metrics are considered stale and no longer
  # included in the metric stream.
  hostTTL: 180

# Configuration for generating the data source map lookup.
dsm:
  # The type of retriever to use for obtaining the data source map look up
  # table.  Either "file" or "script".
  #
  # If "file", "path" should be set to the path to a JSON file.  See
  # ./testdata/dsm.json for an example.
  #
  # If "script" it should be set to the path of an executable script that
  # prints JSON to stdout in the same format as above.  "args" can be set to an
  # array of arguments passed to the executable.
  retriever: "script"

  # See "retriever" comment for what this means.
  path: "/opt/concertim/opt/ct-metric-reporting-daemon/libexec/device-name-to-data_source_map.rb"

  # CLI arguments passed to the above script.  For the above script, a single
  # argument is given, which is the address of the memcache server.
  args: ["localhost:11211"]

  # The data source map is periodically updated using the configured retriever.
  # `frequency` specifies the frequency of the periodic updating.
  #
  # Certain events can cause the data source map to update outside of its
  # periodic updating.  To prevent over consumption of resources, the updates
  # can be throttled such that no two updates will occur within `throttle` of
  # each other.
  #
  # Both the `frequency` and `throttle` values require a number and unit, e.g.,
  # `60s` for sixty seconds or `1h10m20s` for one hour ten minutes and twenty
  # seconds.
  #
  # Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
  frequency: 30s
  throttle: 5s

  # Estimate of how long it takes for the updater to run.
  #
  # If the DSM needs updating outside of its periodic updating, (for instance
  # when receiving a request to report a metric), the updating goroutine sleeps
  # for this duration and assumes that the update will have completed in that
  # duration.
  #
  # This adds a delay of `duration` to API calls to report a metric when the
  # host is not yet known.
  #
  # If this values is too small, it may temporarily result in metrics being
  # incorrectly rejected due to an unknown host.  Those metrics will eventually
  # be accepted.
  duration: 10ms

# Configuration for retrieving metrics from gmetad.
retrieval:
  # The IP address, or hostname, of the gmetad server to poll for metrics.
  ip: localhost

  # The port of the gmetad server to poll for metrics.
  port: 8651

  # The metrics are periodically retrieved from the gmetad source. `frequency`
  # specifies the frequency of the periodic updating.
  #
  # Certain events can cause the metrics to be retrieved outside of its
  # periodic updating.  To prevent over consumption of resources, the updates
  # can be throttled such that no two updates will occur within `throttle` of
  # each other.
  #
  # Both the `frequency` and `throttle` values require a number and unit, e.g.,
  # `60s` for sixty seconds or `1h10m20s` for one hour ten minutes and twenty
  # seconds.
  #
  # Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
  frequency: 15s
  throttle: 5s

# Configuration for storing the processed results.
#
# Currently there is an expectation that the results will be stored in Memcache
# using the Ruby Marshal serialization format.  Golang has poor support for
# serializing and de-serializing Ruby Marshal, so we use a Ruby script to do
# this instead.  The Ruby script is supplied with the processed results as JSON
# via stdin.
recorder:
  # The path of an executable script that reads JSON from stdin in and saves
  # the results to Memcache using Ruby Marshal to serialize.
  path: "/opt/concertim/opt/ct-metric-reporting-daemon/libexec/results-to-memcache.rb"
  # CLI args passed to the above script.  The first arg is the memcache address.
  args: ["localhost:11211"]

log_level: info
shared_secret_file: "/opt/concertim/etc/secret"
