// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.3
// Revision: 8e2c93debfc66888870b2dfd86e70c79a70c920f
// Build Date: 2022-11-09T16:39:46Z
// Built By: goreleaser

package gds

import (
	"fmt"
	"strings"
)

const (
	// MetricSlopeZero is a MetricSlope of type zero.
	MetricSlopeZero MetricSlope = "zero"
	// MetricSlopePositive is a MetricSlope of type positive.
	MetricSlopePositive MetricSlope = "positive"
	// MetricSlopeNegative is a MetricSlope of type negative.
	MetricSlopeNegative MetricSlope = "negative"
	// MetricSlopeBoth is a MetricSlope of type both.
	MetricSlopeBoth MetricSlope = "both"
	// MetricSlopeDerivative is a MetricSlope of type derivative.
	MetricSlopeDerivative MetricSlope = "derivative"
)

var ErrInvalidMetricSlope = fmt.Errorf("not a valid MetricSlope, try [%s]", strings.Join(_MetricSlopeNames, ", "))

var _MetricSlopeNames = []string{
	string(MetricSlopeZero),
	string(MetricSlopePositive),
	string(MetricSlopeNegative),
	string(MetricSlopeBoth),
	string(MetricSlopeDerivative),
}

// MetricSlopeNames returns a list of possible string values of MetricSlope.
func MetricSlopeNames() []string {
	tmp := make([]string, len(_MetricSlopeNames))
	copy(tmp, _MetricSlopeNames)
	return tmp
}

// String implements the Stringer interface.
func (x MetricSlope) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x MetricSlope) IsValid() bool {
	_, err := ParseMetricSlope(string(x))
	return err == nil
}

var _MetricSlopeValue = map[string]MetricSlope{
	"zero":       MetricSlopeZero,
	"positive":   MetricSlopePositive,
	"negative":   MetricSlopeNegative,
	"both":       MetricSlopeBoth,
	"derivative": MetricSlopeDerivative,
}

// ParseMetricSlope attempts to convert a string to a MetricSlope.
func ParseMetricSlope(name string) (MetricSlope, error) {
	if x, ok := _MetricSlopeValue[name]; ok {
		return x, nil
	}
	return MetricSlope(""), fmt.Errorf("%s is %w", name, ErrInvalidMetricSlope)
}

// MarshalText implements the text marshaller method.
func (x MetricSlope) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MetricSlope) UnmarshalText(text []byte) error {
	tmp, err := ParseMetricSlope(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// MetricTypeString is a MetricType of type string.
	MetricTypeString MetricType = "string"
	// MetricTypeInt8 is a MetricType of type int8.
	MetricTypeInt8 MetricType = "int8"
	// MetricTypeUint8 is a MetricType of type uint8.
	MetricTypeUint8 MetricType = "uint8"
	// MetricTypeInt16 is a MetricType of type int16.
	MetricTypeInt16 MetricType = "int16"
	// MetricTypeUint16 is a MetricType of type uint16.
	MetricTypeUint16 MetricType = "uint16"
	// MetricTypeInt32 is a MetricType of type int32.
	MetricTypeInt32 MetricType = "int32"
	// MetricTypeUint32 is a MetricType of type uint32.
	MetricTypeUint32 MetricType = "uint32"
	// MetricTypeFloat is a MetricType of type float.
	MetricTypeFloat MetricType = "float"
	// MetricTypeDouble is a MetricType of type double.
	MetricTypeDouble MetricType = "double"
)

var ErrInvalidMetricType = fmt.Errorf("not a valid MetricType, try [%s]", strings.Join(_MetricTypeNames, ", "))

var _MetricTypeNames = []string{
	string(MetricTypeString),
	string(MetricTypeInt8),
	string(MetricTypeUint8),
	string(MetricTypeInt16),
	string(MetricTypeUint16),
	string(MetricTypeInt32),
	string(MetricTypeUint32),
	string(MetricTypeFloat),
	string(MetricTypeDouble),
}

// MetricTypeNames returns a list of possible string values of MetricType.
func MetricTypeNames() []string {
	tmp := make([]string, len(_MetricTypeNames))
	copy(tmp, _MetricTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x MetricType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x MetricType) IsValid() bool {
	_, err := ParseMetricType(string(x))
	return err == nil
}

var _MetricTypeValue = map[string]MetricType{
	"string": MetricTypeString,
	"int8":   MetricTypeInt8,
	"uint8":  MetricTypeUint8,
	"int16":  MetricTypeInt16,
	"uint16": MetricTypeUint16,
	"int32":  MetricTypeInt32,
	"uint32": MetricTypeUint32,
	"float":  MetricTypeFloat,
	"double": MetricTypeDouble,
}

// ParseMetricType attempts to convert a string to a MetricType.
func ParseMetricType(name string) (MetricType, error) {
	if x, ok := _MetricTypeValue[name]; ok {
		return x, nil
	}
	return MetricType(""), fmt.Errorf("%s is %w", name, ErrInvalidMetricType)
}

// MarshalText implements the text marshaller method.
func (x MetricType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MetricType) UnmarshalText(text []byte) error {
	tmp, err := ParseMetricType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
